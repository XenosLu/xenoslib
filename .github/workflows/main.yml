# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python CI

on:
  push:
    branches: [ master ]
    paths-ignore: [README.md]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  lint:

    runs-on: ubuntu-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8
      - name: Lint with flake8
        id: lint1
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --max-complexity=10 --max-line-length=127 --statistics || echo "::set-output name=failure::true"
      - name: Try Format
        if: steps.lint1.outputs.failure == 'true'
        run: |
          git config --local user.email "xenos.lu@gmail.com"
          git config --local user.name "${{ github.actor }}"
          git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          pip install black
          black -S -l 100 .
          git commit -a -m 'Auto Format with Black'
          git push
      - name: Lint with flake8 after format
        if: steps.lint1.outputs.failure == 'true'
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --max-complexity=10 --max-line-length=127 --statistics

  tests:

    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      fail-fast: false
      matrix:
       os:
       - ubuntu-latest
       - ubuntu-18.04
       - macos-latest
       - windows-latest
       python:
       - '3.6'
       - '3.7'
       - '3.8'
       - '3.9'
       - '3.10'

    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest
        python -m pip install .
    - name: Test with pytest
      run: |
        pytest

  tests-docker:

    runs-on: ubuntu-latest
    needs: lint
    continue-on-error: ${{ contains(matrix.image, 'rc') }}
    strategy:
      fail-fast: false
      matrix:
        image:
        - python:3.6-alpine
        - python:3.7-alpine
        - python:3.8-alpine
        - python:3.9-alpine
        - python:3.10-alpine
        - python:3.11-rc-alpine
        - python:3.6-slim
        - python:3.7-slim
        - python:3.8-slim
        - python:3.9-slim
        - python:3.10-slim
        - python:3.11-rc-slim

    container:
      image: ${{ matrix.image }}

    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest
        python -m pip install .
    - name: Test with pytest
      run: |
        pytest

  tag:

    runs-on: ubuntu-latest
    outputs: 
      tagged: ${{ steps.tag.outputs.tagged }}
    needs: [tests, tests-docker]

    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Try tag
        id: tag
        run: |
          git config --local user.email "xenos.lu@gmail.com"
          git config --local user.name "${{ github.actor }}"
          git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git tag v$(python3 setup.py --version)
          git push --tags && echo "::set-output name=tagged::true" || echo skipped.

  publish:
    needs: tag
    if: needs.tag.outputs.tagged == 'true'
    uses: XenosLu/xenoslib/.github/workflows/publish.yml@master
    secrets:
      PYPI_API_TOKEN : ${{ secrets.PYPI_API_TOKEN  }}
